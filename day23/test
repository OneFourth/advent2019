use intcode::{parse_program, Computer, Program};

use std::sync::Arc;
use std::collections::HashMap;
use std::collections::hash_map::Entry;

struct async_computer {
    c: Computer,
    inputs: Arc<HashMap<usize, Vec<i64>>>,
}

impl async_computer {
    async fn run() {
        if let Entry::Occupied(data) = inputs.entry(i) {
            for d in data {
                computers[i].push(d);
            }
            data.remove_entry();
        }

        if let Some(address) = c.run() {
            if let Some(x) = computers[i].run() {
                if let Some(y) = computers[i].run() {
                }
            }
        }
    }
}

fn part1(base: Program) {
    let mut computers = vec![];
    let mut inputs: Arc<HashMap<usize, Vec<i64>>> = Arc::new(HashMap::new());

    for i in 0..50 {
        let mut c = Computer::new(base.clone());
        c.push(i);
        c.set_default_input(Some(-1));
        computers.push(async_computer {
            c,
            inputs
        });
    }

    while computers.iter().all(|c| !c.done) {
        for i in 0..computers.len() {
            if let Some(address) = computers[i].run() {
                if let Some(x) = computers[i].run() {
                    if let Some(y) = computers[i].run() {
                        println!("Sending X={}, Y={} to address: {}", x, y, address);

                        let send = inputs.entry(address).or_insert_with(Vec::new) = vec![x, y];

                        computers[address as usize].push(x);
                        computers[address as usize].push(y);
                    }
                }
            }
        }
    }
}

fn main() {
    let input = include_str!("../input");
    let base = parse_program(input);

    part1(base);
}
